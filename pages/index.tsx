import Head from 'next/head'
import { NextPage } from 'next'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import ethers, { BigNumber } from 'ethers'
import Web3Modal from 'web3modal'
import { providerOptions } from '../utility/providerOptions'

let web3Modal: Web3Modal
if (typeof window !== 'undefined') {
  web3Modal = new Web3Modal({
    cacheProvider: false,
    providerOptions, // required
    theme: 'dark'
  })
}

const Home: NextPage = function () {
  const [balance, setBalance] = useState<BigNumber>()
  const [provider, setProvider] = useState<any>()
  const [web3, setWeb3] = useState<ethers.ethers.providers.Web3Provider>()
  const [isAccount, setIsAccount] = useState<boolean>(false)
  const [account, setAccount] = useState<string>()
  const [network, setNetwork] = useState<ethers.providers.Network>()
  const [chainId, setChainId] = useState<number>()
  const [error, setError] = useState<unknown>()
  async function connectWallet() {
    try {

      console.log('clicked')

      // const provider = await web3Modal.connect();
      // const web3 = new ethers.providers.Web3Provider(provider)
      // const info = web3.connection
      // const accounts = await web3.listAccounts()
      // const network = await web3.getNetwork()
      // console.log(info)

      // console.log(accounts)

      // console.log(network)
      // setProvider(provider)
      // setWeb3(web3)
      // if (accounts) {
      //   setAccount(accounts[0])
      //   const balance = await web3.getBalance(accounts[0])
      //   setBalance(balance)
      // }
      // setNetwork(network)
      // setChainId(network.chainId)
    } catch (error) {
      console.log(error)
    }
  }

  // const handleNetwork = (e) => {
  //   const id = e.target.value;
  //   setNetwork(Number(id));
  // };

  // const handleInput = (e) => {
  //   const msg = e.target.value;
  //   setMessage(msg);
  // };

  // const switchNetwork = async () => {
  //   try {
  //     await web3.provider.request({
  //       method: "wallet_switchEthereumChain",
  //       params: [{ chainId: toHex(network) }]
  //     });
  //   } catch (switchError) {
  //     if (switchError.code === 4902) {
  //       try {
  //         await web3.provider.request({
  //           method: "wallet_addEthereumChain",
  //           params: [networkParams[toHex(network)]]
  //         });
  //       } catch (error) {
  //         setError(error);
  //       }
  //     }
  //   }
  // };

  // const signMessage = async () => {
  //   if (!web3) return;
  //   try {
  //     const signature = await web3.provider.request({
  //       method: "personal_sign",
  //       params: [message, account]
  //     });
  //     setSignedMessage(message);
  //     setSignature(signature);
  //   } catch (error) {
  //     setError(error);
  //   }
  // };

  // const verifyMessage = async () => {
  //   if (!web3) return;
  //   try {
  //     const verify = await web3.provider.request({
  //       method: "personal_ecRecover",
  //       params: [signedMessage, signature]
  //     });
  //     setVerified(verify === account.toLowerCase());
  //   } catch (error) {
  //     setError(error);
  //   }
  // };

  const refreshState = () => {
    setAccount("")
    setChainId(undefined)
    setNetwork(undefined)
    // setMessage("")
    // setSignature("")
    // setVerified(undefined)
  };

  async function disconnect() {
    await web3Modal.clearCachedProvider();
    refreshState();
  };

  useEffect(function () {
    if (web3Modal.cachedProvider) {
      connectWallet();
    }
  }, []);

  useEffect(function () {
    if (provider?.on) {
      const handleAccountsChanged = function (accounts: string[]) {
        console.log("accountsChanged", accounts);
        if (accounts) setAccount(accounts[0]);
      };

      const handleChainChanged = function (_hexChainId: number) {
        setChainId(_hexChainId);
      };

      const handleDisconnect = function () {
        console.log("disconnect", error);
        disconnect();
      };

      provider.on("accountsChanged", handleAccountsChanged);
      provider.on("chainChanged", handleChainChanged);
      provider.on("disconnect", handleDisconnect);

      return function () {
        if (provider.removeListener) {
          provider.removeListener("accountsChanged", handleAccountsChanged);
          provider.removeListener("chainChanged", handleChainChanged);
          provider.removeListener("disconnect", handleDisconnect);
        }
      };
    }
  }, [provider]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Metamask Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Metamask Demo
        </h1>
        <h2>
          Connected address: {account}
        </h2>
        <h3>
          Your Account Balance: {balance?.toNumber()}
        </h3>
        <div className={styles.grid}>
          {!account ? (
            <button className={styles.card} onClick={connectWallet}>
              <p>Connect Wallet</p>
            </button>) : (
            <button className={styles.card} onClick={disconnect}>
              <p>Disconnect</p>
            </button>)}


          {/* <button className={styles.card} onClick={getBalance}> */}
          {/* <p>Get Balance</p> */}
          {/* </button> */}
        </div>
      </main>
    </div>
  )

}

export default Home